// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  VISTOR
}

enum Status {
  ACTIVE
  DESACTIVE
  ARCHIVED
}

enum Mode {
  DARK
  LIGHT
}

enum FileType {
  PDF
  DOC
  DOCX
  RFT
}

model User {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  profilImage String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Client {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  email       String        @unique
  password    String
  profilImage String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  ownedTeams  TeamMenber[]  @relation("OwnerRelation")
  memberTeams TeamMenber[]  @relation("MemberRelation")
  Compagne    Compagne[]
  Call        Call[]
  Email       Email[]
  Notes       Notes[]
  Task        Task[]
  appointment Appointment[]
}

model TeamMenber {
  id           String         @id @default(cuid())
  owenrId      String
  membreId     String
  owner        Client         @relation("OwnerRelation", fields: [owenrId], references: [id])
  member       Client         @relation("MemberRelation", fields: [membreId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  clientId     String?
  TeamCompagne TeamCompagne[]
}

model TeamCompagne {
  id           String     @id @default(cuid())
  teamMenbreId String
  compagneId   String
  role         Role
  teamMember   TeamMenber @relation(fields: [teamMenbreId], references: [id])
  compagne     Compagne   @relation(fields: [compagneId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Compagne {
  id           String         @id @default(cuid())
  compagneName String
  description  String?
  status       Status         @default(ACTIVE)
  favrite      Boolean        @default(false)
  clientId     String
  client       Client         @relation(fields: [clientId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  Form         Form[]
  TeamCompagne TeamCompagne[]
  soumission   Soumission[]
  Call         Call[]
  Email        Email[]
  Notes        Notes[]
  Task         Task[]
  appointment  Appointment[]
}

model Fields {
  id             String           @id @default(cuid())
  icon           String
  fieldName      String           @unique
  type           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  FormField      FormField[]
  ModelFormField ModelFormField[]
}

model Form {
  id               String      @id @default(cuid())
  title            String?
  titleStyle       String?
  titleTextStyle   TextStyle?  @relation("TitleTextStyle", fields: [titleStyle], references: [id])
  formStyle        String?
  formTextStyle    TextStyle?  @relation("formTextStyle", fields: [formStyle], references: [id])
  Description      String?
  coverColor       String?
  coverImage       String?
  mode             Mode        @default(LIGHT)
  messageSucces    String?
  compagneId       String
  compagne         Compagne    @relation(fields: [compagneId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  deletedAt        DateTime?
  desactivatedAt   DateTime?
  sendCopyToUser   Boolean     @default(false)
  uniqueEmailUsage Boolean     @default(false)
  uniqueEmailField String? // ID du champ email à usage unique
  isDeactivated    Boolean     @default(false) // Date de désactivation automatique
  defaultFieldId   String? // ID du champ à utiliser comme identifiant par défaut
  FormField        FormField[]
}

model FormFieldOption {
  id           String    @id @default(cuid())
  formFieldId  String
  formField    FormField @relation(fields: [formFieldId], references: [id], onDelete: Cascade)
  ordre        Int
  content      String
  default      Boolean   @default(false)
  desactivedAt Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model FormField {
  id              String            @id @default(cuid())
  formId          String
  form            Form              @relation(fields: [formId], references: [id])
  fieldId         String
  fields          Fields            @relation(fields: [fieldId], references: [id])
  label           String?
  name            String?
  requird         Boolean?
  disable         Boolean           @default(false)
  style           String[]          @default([])
  message         String?
  ordre           Int
  placeholdre     String?
  min             Int?
  max             Int?
  fileType        FileType?
  instruction     String?
  selectId        String[]          @default([])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Answer          Answer[]
  FormFieldOption FormFieldOption[]
  FormFieldMap    FormFieldMap[]
}

model Soumission {
  id          String        @id @default(cuid())
  compagneId  String
  compagne    Compagne      @relation(fields: [compagneId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  favorite    Boolean       @default(false)
  answer      Answer[]
  Call        Call[]
  Email       Email[]
  Notes       Notes[]
  Task        Task[]
  appointment Appointment[]
}

model Answer {
  id           String     @id @default(cuid())
  valeu        String
  formFieldId  String
  formField    FormField  @relation(fields: [formFieldId], references: [id])
  soumissionId String
  soumission   Soumission @relation(fields: [soumissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Call {
  id           String     @id @default(cuid())
  call         String
  compagneId   String
  compagne     Compagne   @relation(fields: [compagneId], references: [id])
  clientId     String
  client       Client     @relation(fields: [clientId], references: [id])
  soumissionId String
  soumission   Soumission @relation(fields: [soumissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Email {
  id           String     @id @default(cuid())
  email        String
  compagneId   String
  compagne     Compagne   @relation(fields: [compagneId], references: [id])
  clientId     String
  client       Client     @relation(fields: [clientId], references: [id])
  soumissionId String
  soumission   Soumission @relation(fields: [soumissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Notes {
  id           String     @id @default(cuid())
  notes        String
  compagneId   String
  compagne     Compagne   @relation(fields: [compagneId], references: [id])
  clientId     String
  client       Client     @relation(fields: [clientId], references: [id])
  soumissionId String
  soumission   Soumission @relation(fields: [soumissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Task {
  id           String     @id @default(cuid())
  task         String
  compagneId   String
  compagne     Compagne   @relation(fields: [compagneId], references: [id])
  clientId     String
  client       Client     @relation(fields: [clientId], references: [id])
  soumissionId String
  soumission   Soumission @relation(fields: [soumissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Appointment {
  id           String     @id @default(cuid())
  date         DateTime
  compagneId   String
  compagne     Compagne   @relation(fields: [compagneId], references: [id])
  clientId     String
  client       Client     @relation(fields: [clientId], references: [id])
  soumissionId String
  soumission   Soumission @relation(fields: [soumissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model ModelForm {
  id             String           @id @default(cuid())
  title          String?
  Description    String?
  coverColor     String?
  coverImage     String?
  mode           Mode             @default(LIGHT)
  messageSucces  String?
  categotyId     String
  categoty       Categoty         @relation(fields: [categotyId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  desactivatedAt DateTime?
  modelFormField ModelFormField[]
}

model ModelFormField {
  id          String    @id @default(cuid())
  modelFormId String
  fieldId     String
  name        String?
  label       String?
  requird     Boolean?
  disable     Boolean   @default(false)
  style       String[]  @default([])
  message     String?
  ordre       Int
  placeholdre String?
  min         Int?
  max         Int?
  fileType    FileType?
  instruction String?
  options     Json?     @default("[]")
  modelForm   ModelForm @relation(fields: [modelFormId], references: [id])
  fields      Fields    @relation(fields: [fieldId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Categoty {
  id           String      @id @default(cuid())
  categotyName String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  ModelForm    ModelForm[]
}

model TextStyle {
  id        String    @id @default(cuid())
  styleName String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  TitleForm Form[]    @relation("TitleTextStyle")
  TextForm  Form[]    @relation("formTextStyle")
}

model FormFieldMap {
  id          String    @id @default(cuid())
  formFieldId String    @unique
  lat         Float     @default(48.8566)
  lng         Float     @default(2.3522)
  zoom        Int       @default(13)
  height      Int       @default(400)
  formField   FormField @relation(fields: [formFieldId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
